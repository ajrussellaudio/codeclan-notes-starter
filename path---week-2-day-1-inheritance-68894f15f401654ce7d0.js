webpackJsonp([0x9c09121e2126],{518:function(n,a){n.exports={data:{site:{siteMetadata:{title:"CodeClan",author:"CodeClan Instructor Team"}},markdownRemark:{id:"/Users/alanrussell/Documents/playground/gatsby/codeclan-notes-starter/lessons/week_2/day_1/inheritance/index.md absPath of file >>> MarkdownRemark",html:'<h2 id="intro"><a href="#intro" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Intro</h2>\n<p>When we were learning Ruby, we saw how useful it was to gather classes together when they share properties or functionality. We used <em>inheritance</em> to describe the relationship between superclasses and subclasses.</p>\n<blockquote>\n<p>Scan the room for blank expressions. Have a quick recap of inheritance in Ruby if necessary.</p>\n</blockquote>\n<div class="gatsby-highlight">\n      <pre class="language-ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span>\n  <span class="token comment"># ...</span>\n  <span class="token keyword">def</span> start_engine\n    <span class="token string">"Vrmmmm!"</span>\n  <span class="token keyword">end</span>\n<span class="token keyword">end</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token operator">&lt;</span> <span class="token constant">Vehicle</span>\n\n<span class="token keyword">end</span>\n</code></pre>\n      </div>\n<p>The same concept exists in Java, and although the syntax is a little different, the idea is much the same. We can use the ‘extends’ keyword to use inheritance.</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> numWheels <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumWheels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numWheels<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>We can see from the example above that the Car class has inherited the numWheels property from the parent vehicle class. If we want, we can <em>override</em> the property’s value with something new.</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> numWheels <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Motorbike</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token function">Motorbike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    numWheels <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Note that we have to override the instance variable in the constructor.</p>\n<p>We can override methods to do something specific for that class:</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> String <span class="token function">startEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">"Vrrrm!"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> String <span class="token function">startEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">"Vrrrm! I\'m a car!"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2 id="super"><a href="#super" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Super!</h2>\n<p>Just as in Ruby, we can use the <code>super</code> keyword to trigger functionality from the parent class. We can refactor the code above to be more DRY.</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> String <span class="token function">startEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">"Vrrrm!"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> String <span class="token function">startEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">startEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" I\'m a car!"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>When the <code>super()</code> method is called on its own, it will call the parent class’ constructor.</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> numWheels<span class="token punctuation">;</span>\n\n  <span class="token keyword">public</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token keyword">int</span> numWheels<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>numWheels <span class="token operator">=</span> numWheels<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">int</span> numWheels<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>numWheels<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>In this example, when we instantiate a new car, we will pass an integer parameter to the parent vehicle class:</p>\n<p><code>Car fiesta = new Car(4);</code></p>\n<h2 id="types-of-inheritance"><a href="#types-of-inheritance" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Types of inheritance</h2>\n<p>So far, we have been using single inheritance, where our Car class inherits from a single parent, Vehicle. We can also create an <em>inheritance chain</em>, where a class inherits from more than one layer of parent classes. For example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ElectricCar</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>However, we can never inherit directly from more than one parent class. This would be illegal:</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span><span class="token punctuation">,</span> Vehicle <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2 id="task-optional---20-minutes"><a href="#task-optional---20-minutes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Task (Optional) - 20 minutes</h2>\n<p>Create your own inheritance chain for modelling various types of animal.</p>\n<ul>\n<li>Your base class should be Animal, and should have methods for <code>eat()</code> and <code>breathe()</code>.</li>\n<li>Create a subclass of Animal called Mammal. Mammals should have a <code>brushHair()</code> method.</li>\n<li>Create two further subclasses of Mammal: Human and Chimpanzee. They should have a <code>speak()</code> method.</li>\n</ul>\n<p>Make each method return a suitable string. Check that you can create a human and a chimpanzee object, and make sure that they can each eat, breathe, brush their hair, and speak.</p>',frontmatter:{title:"Inheritance",duration:null},tableOfContents:'<ul>\n<li><a href="/codeclan-notes-starter/week_2/day_1/inheritance/#intro">Intro</a></li>\n<li><a href="/codeclan-notes-starter/week_2/day_1/inheritance/#super">Super!</a></li>\n<li><a href="/codeclan-notes-starter/week_2/day_1/inheritance/#types-of-inheritance">Types of inheritance</a></li>\n<li><a href="/codeclan-notes-starter/week_2/day_1/inheritance/#task-optional---20-minutes">Task (Optional) - 20 minutes</a></li>\n</ul>'}},pathContext:{slug:"/week_2/day_1/inheritance/"}}}});
//# sourceMappingURL=path---week-2-day-1-inheritance-68894f15f401654ce7d0.js.map